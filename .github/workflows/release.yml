name: Model training

on:
  push:
    tags:
      - "v*.*.*"

env:
  PYTHON_VERSION: "3.10"

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install DVC and dependencies
        run: pip install dvc dvc[gdrive]

      - name: Write service account JSON
        run: |
          mkdir -p .dvc/tmp
          echo "${{ secrets.GDRIVE_SERVICEACCOUNT_SECRET }}" | base64 -d > .dvc/tmp/remlaproject-sa.json

      - name: Debug JSON content
        run: |
          head -n 2 .dvc/tmp/remlaproject-sa.json

      - name: Pull DVC data
        run: dvc pull

      - name: Lint with pylint
        run: pylint training

      - name: Run tests with coverage
        run: pytest --cov=training --cov-report=term-missing

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install DVC and dependencies
        run: pip install dvc dvc[gdrive]

      - name: Write service account JSON
        run: |
          mkdir -p .dvc/tmp
          echo "${{ secrets.GDRIVE_SERVICEACCOUNT_SECRET }}" | base64 -d > .dvc/tmp/remlaproject-sa.json

      - name: Debug JSON content
        run: |
          head -n 2 .dvc/tmp/remlaproject-sa.json

      - name: Pull DVC data
        run: dvc pull

      - name: Run DVC pipeline (train model)
        run: dvc repro

      - name: Get release version with lib-version
        id: get_version
        run: |
          VERSION=$(lib-version version current)
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Rename model artifact for release
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          cp models/SentimentModel.pkl models/SentimentModel_v${VERSION}.pkl

      - name: Create GitHub Release and upload model artifact
        uses: softprops/action-gh-release@v1
        with:
          name: Model Release v${{ steps.get_version.outputs.version }}
          tag_name: v${{ steps.get_version.outputs.version }}
          files: models/SentimentModel_v${{ steps.get_version.outputs.version }}.pkl
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
